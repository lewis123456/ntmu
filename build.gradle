buildscript {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
    }
}

group 'org.lewis'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8

applicationName = 'ntmu'
mainClassName = 'org.lewis.ntmu.server.NtmuServer'

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE",
            "com.alibaba:druid:1.1.5",
            "mysql:mysql-connector-java:5.1.24",
            "org.mybatis:mybatis:3.2.8",
            "org.mybatis:mybatis-spring:1.3.0",
            "org.springframework:spring-jdbc:4.3.13.RELEASE")
    testCompile("junit:junit:4.12",
                "org.springframework.boot:spring-boot-starter-test:1.5.9.RELEASE")
}

bootRun {

}

task copyJars(type: Copy) {
    from configurations.runtime
    into 'lib'
}

clean.doFirst {
    delete 'build'
    delete 'dist'
}

jar {
    baseName project.name

    exclude '**/*.properties*'
    exclude '**/*log4j2.xml*'
    exclude '/*.xml'
    exclude 'server.env'

    manifest {
        attributes(
            "Specification-Version": project.version
        )
    }
}

task dist(type: Copy, overwrite: true, dependsOn: ['clean', 'jar']) {
    destinationDir = new File(projectDir, 'dist')
    includeEmptyDirs = false

    into('/sq/') { from 'src/main/sql' }
    into('/scripts/') { from 'src/main/scripts' fileMode 0755 }
    into(/bin/) { from new File(temporaryDir, 'bin') include '**/*' fileMode 0755 }
    into('/bin/') {
        from processResources.destinationDir
        include 'server.env'
        include 'start.sh'
        include 'stop.sh'
    }
    into('/apps/') { from project.jar.getArchivePath() }
    into('/lib/') {
        from configurations.runtime
        exclude '**/*.properties*'
        exclude '**/*.log4j2.xml*'
        exclude '**/*junit*.jar'
    }
    into('/conf') {
        from processResources.destinationDir
        include '**/*.properties*'
        include '**/*log4j2.xml*'
        include '/*.xml'
        exclude 'server.env'
    }
    doLast {
        new File(destinationDir, 'logs').mkdir()
    }
}


















